
CS:APP Shell Lab: Grading Sheet for dmcdonnel-tsh.c


Part 0: Compiling your shell

gcc -Wall -O2    tsh.c   -o tsh
gcc -Wall -O2    myspin.c   -o myspin
gcc -Wall -O2    mysplit.c   -o mysplit
gcc -Wall -O2    mystop.c   -o mystop
gcc -Wall -O2    myint.c   -o myint

Part 1: Correctness Tests

Checking trace01.txt...
Checking trace02.txt...
Checking trace03.txt...
Checking trace04.txt...
Checking trace05.txt...
Checking trace06.txt...

Reference output:
#
# trace06.txt - Forward SIGINT to foreground job.
#
tsh> ./myspin 4
Job [1] (17348) terminated by signal 2
Student's output:
#
# trace06.txt - Forward SIGINT to foreground job.
#
tsh> ./myspin 4
Job [1] (17690) terminated by signal 17. 
Checking trace07.txt...

Reference output:
#
# trace07.txt - Forward SIGINT only to foreground job.
#
tsh> ./myspin 4 &
[1] (18046) ./myspin 4 &
tsh> ./myspin 5
Job [2] (18048) terminated by signal 2
tsh> jobs
[1] (18046) Running ./myspin 4 &
Student's output:
#
# trace07.txt - Forward SIGINT only to foreground job.
#
tsh> ./myspin 4 &
[1] (18752) ./myspin 4 &
tsh> ./myspin 5
Job [2] (18754) terminated by signal 17. 
tsh> jobs
[1] (18752) Running ./myspin 4 &
Checking trace08.txt...

Reference output:
#
# trace08.txt - Forward SIGTSTP only to foreground job.
#
tsh> ./myspin 4 &
[1] (19478) ./myspin 4 &
tsh> ./myspin 5
Job [2] (19480) stopped by signal 20
tsh> jobs
[1] (19478) Running ./myspin 4 &
[2] (19480) Stopped ./myspin 5 
Student's output:
#
# trace08.txt - Forward SIGTSTP only to foreground job.
#
tsh> ./myspin 4 &
[1] (20311) ./myspin 4 &
tsh> ./myspin 5
[2] (20313) Stopped ./myspin 5 

tsh> jobs
[1] (20311) Running ./myspin 4 &
[2] (20313) Stopped ./myspin 5 
Checking trace09.txt...

Reference output:
#
# trace09.txt - Process bg builtin command
#
tsh> ./myspin 4 &
[1] (21029) ./myspin 4 &
tsh> ./myspin 5
Job [2] (21031) stopped by signal 20
tsh> jobs
[1] (21029) Running ./myspin 4 &
[2] (21031) Stopped ./myspin 5 
tsh> bg %2
[2] (21031) ./myspin 5 
tsh> jobs
[1] (21029) Running ./myspin 4 &
[2] (21031) Running ./myspin 5 
Student's output:
#
# trace09.txt - Process bg builtin command
#
tsh> ./myspin 4 &
[1] (21798) ./myspin 4 &
tsh> ./myspin 5
[2] (21800) Stopped ./myspin 5 

tsh> jobs
[1] (21798) Running ./myspin 4 &
[2] (21800) Stopped ./myspin 5 
tsh> bg %2
[2] (21800) ./myspin 5 
tsh> jobs
[1] (21798) Running ./myspin 4 &
[2] (21800) Running ./myspin 5 
Checking trace10.txt...

Reference output:
#
# trace10.txt - Process fg builtin command. 
#
tsh> ./myspin 4 &
[1] (22686) ./myspin 4 &
tsh> fg %1
Job [1] (22686) stopped by signal 20
tsh> jobs
[1] (22686) Stopped ./myspin 4 &
tsh> fg %1
tsh> jobs
Student's output:
#
# trace10.txt - Process fg builtin command. 
#
tsh> ./myspin 4 &
[1] (23392) ./myspin 4 &
tsh> fg %1
[1] (23392) Stopped ./myspin 4 &

tsh> jobs
[1] (23392) Stopped ./myspin 4 &
tsh> fg %1
tsh> jobs
Checking trace11.txt...

Reference output:
#
# trace11.txt - Forward SIGINT to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (24105) terminated by signal 2
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
24085 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace11.txt
24086 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace11.txt
24094 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace11.txt -s ./tshref -a -p
24103 pts/4    S+     0:00 ./tshref -p
24440 pts/4    R      0:00 /bin/ps a
Student's output:
#
# trace11.txt - Forward SIGINT to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (24452) terminated by signal 17. 
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
24085 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace11.txt
24086 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace11.txt
24447 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace11.txt -s ./tsh -a -p
24450 pts/4    S+     0:00 ./tsh -p
24789 pts/4    R      0:00 /bin/ps a
Checking trace12.txt...

Reference output:
#
# trace12.txt - Forward SIGTSTP to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (24810) stopped by signal 20
tsh> jobs
[1] (24810) Stopped ./mysplit 4 
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
24794 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace12.txt
24795 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace12.txt
24805 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tshref -a -p
24808 pts/4    S+     0:00 ./tshref -p
24810 pts/4    T      0:00 ./mysplit 4
24811 pts/4    T      0:00 ./mysplit 4
25172 pts/4    R      0:00 /bin/ps a
Student's output:
#
# trace12.txt - Forward SIGTSTP to every process in foreground process group
#
tsh> ./mysplit 4
[1] (25184) Stopped ./mysplit 4 

tsh> jobs
[1] (25184) Stopped ./mysplit 4 
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
24794 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace12.txt
24795 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace12.txt
25177 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
25182 pts/4    S+     0:00 ./tsh -p
25184 pts/4    T      0:00 ./mysplit 4
25185 pts/4    T      0:00 ./mysplit 4
25537 pts/4    R      0:00 /bin/ps a
Checking trace13.txt...

Reference output:
#
# trace13.txt - Restart every stopped process in process group
#
tsh> ./mysplit 4
Job [1] (25566) stopped by signal 20
tsh> jobs
[1] (25566) Stopped ./mysplit 4 
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
25548 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace13.txt
25549 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
25555 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tshref -a -p
25564 pts/4    S+     0:00 ./tshref -p
25566 pts/4    T      0:00 ./mysplit 4
25567 pts/4    T      0:00 ./mysplit 4
25916 pts/4    R      0:00 /bin/ps a
tsh> fg %1
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
25548 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace13.txt
25549 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
25555 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tshref -a -p
25564 pts/4    S+     0:00 ./tshref -p
26275 pts/4    R      0:00 /bin/ps a
Student's output:
#
# trace13.txt - Restart every stopped process in process group
#
tsh> ./mysplit 4
[1] (26291) Stopped ./mysplit 4 

tsh> jobs
[1] (26291) Stopped ./mysplit 4 
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
25548 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace13.txt
25549 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
26280 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
26289 pts/4    S+     0:00 ./tsh -p
26291 pts/4    T      0:00 ./mysplit 4
26292 pts/4    T      0:00 ./mysplit 4
26636 pts/4    R      0:00 /bin/ps a
tsh> fg %1
tsh> /bin/ps a
  PID TTY      STAT   TIME COMMAND
  413 pts/3    Ss+    0:00 /bin/bash
 3925 pts/1    Ss     0:00 bash
 5432 pts/38   T      0:00 svn ci -m Adding partners.txt and codename.
 9217 pts/2    Ss+    0:00 bash
 9997 tty1     Ss+    0:09 /usr/bin/Xorg :0 -background none -verbose -auth /run/gdm/auth-for-gdm-Skz1Kr/database -seat seat0 -nolisten tcp vt1
10449 pts/4    Ss     0:00 -bash
13664 pts/38   Ss+    0:00 bash
13897 pts/26   Ss     0:00 /bin/bash
14480 pts/26   Sl+  157:00 /project/linuxlab/matlab-2015a/bin/glnxa64/MATLAB -prefersoftwareopengl
15677 pts/4    S+     0:00 sh -c /home/warehouse/cse361s/cse361/labs/5-shlab/grade/grade-shlab.pl  -f ./handin/dmcdonnel-tsh.c -s ../src > /home/warehouse/cse361s/cse361/labs/5-shlab/grade/./handin.grades/dmcdonnel-tsh.c.out 2>&1
15678 pts/4    S+     0:00 grade-shlab.pl
16516 pts/4    S+     0:00 grade-handins.pl
16702 pts/38   T      0:00 python busters.py -k 1 -a inference=ParticleFilter -s -g StationaryGhost
17276 pts/1    S+     0:14 /project/linuxlab/synopsys/coreTools/linux/dware/bin/rt_shell_exec -r /project/linuxlab/synopsys/coreTools -mode assembler -gui -notty
21614 pts/37   Ss+    0:00 /project/linuxlab/matlab-2015a/bin/glnxa64/matlab_helper /dev/pts/37 no
25548 pts/4    S+     0:00 sh -c cd /tmp/dmcdonnel-tsh.c.15678; ./checktsh.pl -e -t trace13.txt
25549 pts/4    S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
26280 pts/4    S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
26289 pts/4    S+     0:00 ./tsh -p
27024 pts/4    R      0:00 /bin/ps a
Checking trace14.txt...

Reference output:
#
# trace14.txt - Simple error handling
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 4 &
[1] (27057) ./myspin 4 &
tsh> fg
fg command requires PID or %jobid argument
tsh> bg
bg command requires PID or %jobid argument
tsh> fg a
fg: argument must be a PID or %jobid
tsh> bg a
bg: argument must be a PID or %jobid
tsh> fg 9999999
(9999999): No such process
tsh> bg 9999999
(9999999): No such process
tsh> fg %2
%2: No such job
tsh> fg %1
Job [1] (27057) stopped by signal 20
tsh> bg %2
%2: No such job
tsh> bg %1
[1] (27057) ./myspin 4 &
tsh> jobs
[1] (27057) Running ./myspin 4 &
Student's output:
#
# trace14.txt - Simple error handling
#
tsh> ./bogus
./bogus: Command not found 
tsh> ./myspin 4 &
[1] (27889) ./myspin 4 &
tsh> fg
fg command requires PID or %jobid argument 
tsh> bg
bg command requires PID or %jobid argument 
tsh> fg a
fg: argument must be a PID or %jobid 
tsh> bg a
bg: argument must be a PID or %jobid 
tsh> fg 9999999
(9999999): No such process. 
tsh> bg 9999999
(9999999): No such process. 
tsh> fg %2
%2: No such job. 
tsh> fg %1
[1] (27889) Stopped ./myspin 4 &

tsh> bg %2
%2: No such job. 
tsh> bg %1
[1] (27889) ./myspin 4 &
tsh> jobs
[1] (27889) Running ./myspin 4 &
Checking trace15.txt...

Reference output:
#
# trace15.txt - Putting it all together
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 10
Job [1] (28623) terminated by signal 2
tsh> ./myspin 3 &
[1] (28969) ./myspin 3 &
tsh> ./myspin 4 &
[2] (28971) ./myspin 4 &
tsh> jobs
[1] (28969) Running ./myspin 3 &
[2] (28971) Running ./myspin 4 &
tsh> fg %1
Job [1] (28969) stopped by signal 20
tsh> jobs
[1] (28969) Stopped ./myspin 3 &
[2] (28971) Running ./myspin 4 &
tsh> bg %3
%3: No such job
tsh> bg %1
[1] (28969) ./myspin 3 &
tsh> jobs
[1] (28969) Running ./myspin 3 &
[2] (28971) Running ./myspin 4 &
tsh> fg %1
tsh> quit
Student's output:
#
# trace15.txt - Putting it all together
#
tsh> ./bogus
./bogus: Command not found 
tsh> ./myspin 10
Job [1] (29656) terminated by signal 17. 
tsh> ./myspin 3 &
[1] (30011) ./myspin 3 &
tsh> ./myspin 4 &
[2] (30013) ./myspin 4 &
tsh> jobs
[1] (30011) Running ./myspin 3 &
[2] (30013) Running ./myspin 4 &
tsh> fg %1
[1] (30011) Stopped ./myspin 3 &

tsh> jobs
[1] (30011) Stopped ./myspin 3 &
[2] (30013) Running ./myspin 4 &
tsh> bg %3
%3: No such job. 
tsh> bg %1
[1] (30011) ./myspin 3 &
tsh> jobs
[1] (30011) Running ./myspin 3 &
[2] (30013) Running ./myspin 4 &
tsh> fg %1
tsh> quit
Checking trace16.txt...

Reference output:
#
# trace16.txt - Tests whether the shell can handle SIGTSTP and SIGINT
#     signals that come from other processes instead of the terminal.
#
tsh> ./mystop 2
Job [1] (30732) stopped by signal 20
tsh> jobs
[1] (30732) Stopped ./mystop 2
tsh> ./myint 2
Job [2] (31243) terminated by signal 2
Student's output:
#
# trace16.txt - Tests whether the shell can handle SIGTSTP and SIGINT
#     signals that come from other processes instead of the terminal.
#
tsh> ./mystop 2
[1] (31587) Stopped ./mystop 2

tsh> jobs
[1] (31587) Stopped ./mystop 2
tsh> ./myint 2
Job [2] (32084) terminated by signal 17. 

Score: 25


Part 2: Original dmcdonnel-tsh.c file

/* 
 * tsh - A tiny shell program with job control
 * 
 * <Put your name and WUSTL key here>
 *  
 * If you work in a group of two, 
 * <Put your group name here>
 * <Put name and WUSTL key of member #1 here>
 * <Put name and WUSTL key of member #2 here>
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

/* Misc manifest constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */
#define MAXJID    1<<16   /* max job ID */

/* Job states */
#define UNDEF 0 /* undefined */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* 
 * Jobs states: FG (foreground), BG (background), ST (stopped)
 * Job state transitions and enabling actions:
 *     FG -> ST  : ctrl-z
 *     ST -> FG  : fg command
 *     ST -> BG  : bg command
 *     BG -> FG  : fg command
 * At most 1 job can be in the FG state.
 */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "tsh> ";    /* command line prompt (DO NOT CHANGE) */
int verbose = 0;            /* if true, print additional output */
int nextjid = 1;            /* next job ID to allocate */
char sbuf[MAXLINE];         /* for composing sprintf messages */

struct job_t {              /* The job struct */
    pid_t pid;              /* job PID */
    int jid;                /* job ID [1, 2, ...] */
    int state;              /* UNDEF, BG, FG, or ST */
    char cmdline[MAXLINE];  /* command line */
};
struct job_t jobs[MAXJOBS]; /* The job list */
/* End global variables */


/* Function prototypes */

/* Here are the functions that you will implement */
void eval(char *cmdline);
int builtin_cmd(char **argv);
void do_bgfg(char **argv);
void waitfg(pid_t pid);

void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);

/* Here are helper routines that we've provided for you */
int parseline(const char *cmdline, char **argv); 
void sigquit_handler(int sig);

void clearjob(struct job_t *job);
void initjobs(struct job_t *jobs);
int maxjid(struct job_t *jobs); 
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline);
int deletejob(struct job_t *jobs, pid_t pid); 
pid_t fgpid(struct job_t *jobs);
struct job_t *getjobpid(struct job_t *jobs, pid_t pid);
struct job_t *getjobjid(struct job_t *jobs, int jid); 
int pid2jid(pid_t pid); 
void listjobs(struct job_t *jobs);

void usage(void);
void unix_error(char *msg);
void app_error(char *msg);
typedef void handler_t(int);
handler_t *Signal(int signum, handler_t *handler);

/*
 * main - The shell's main routine 
 */
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE];
    int emit_prompt = 1; /* emit prompt (default) */

    /* Redirect stderr to stdout (so that driver will get all output
     * on the pipe connected to stdout) */
    dup2(1, 2);

    /* Parse the command line */
    while ((c = getopt(argc, argv, "hvp")) != EOF) {
        switch (c) {
        case 'h':             /* print help message */
            usage();
	    break;
        case 'v':             /* emit additional diagnostic info */
            verbose = 1;
	    break;
        case 'p':             /* don't print a prompt */
            emit_prompt = 0;  /* handy for automatic testing */
	    break;
	default:
            usage();
	}
    }

    /* Install the signal handlers */

    /* These are the ones you will need to implement */
    Signal(SIGINT,  sigint_handler);   /* ctrl-c */
    Signal(SIGTSTP, sigtstp_handler);  /* ctrl-z */
    Signal(SIGCHLD, sigchld_handler);  /* Terminated or stopped child */

    /* This one provides a clean way to kill the shell */
    Signal(SIGQUIT, sigquit_handler); 

    /* Initialize the job list */
    initjobs(jobs);

    /* Execute the shell's read/eval loop */
    while (1) {

	/* Read command line */
	if (emit_prompt) {
	    printf("%s", prompt);
	    fflush(stdout);
	}
	if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
	    app_error("fgets error");
	if (feof(stdin)) { /* End of file (ctrl-d) */
	    fflush(stdout);
	    exit(0);
	}

	/* Evaluate the command line */
	eval(cmdline);
	fflush(stdout);
	fflush(stdout);
    } 

    exit(0); /* control never reaches here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, jobs, bg or fg)
 * then execute it immediately. Otherwise, fork a child process and
 * run the job in the context of the child. If the job is running in
 * the foreground, wait for it to terminate and then return.  Note:
 * each child process must have a unique process group ID so that our
 * background children don't receive SIGINT (SIGTSTP) from the kernel
 * when we type ctrl-c (ctrl-z) at the keyboard.  
*/
void eval(char *cmdline) 
{
char *argv[MAXARGS];
    int bg = parseline(cmdline, argv);
    pid_t PID = 0;
    sigset_t mask;


    if(bg == -1) {
        return;
    }

    sigemptyset(&mask);
    sigaddset(&mask, SIGCHLD);
    sigaddset(&mask, SIGINT);
    sigaddset(&mask, SIGTSTP);


    if(!builtin_cmd(argv)) {
        sigprocmask(SIG_BLOCK, &mask, NULL);
        /* Child process. PID = 0. */
        if((PID = fork()) == 0) {
            sigprocmask(SIG_UNBLOCK, &mask, NULL);
            setpgid(0, 0);
            if(execv(argv[0], argv) < 0) {
                printf("%s: Command not found \n", argv[0]);
                exit(0);
            }
        }


        if(!bg)
        {
            if(addjob(jobs, PID, FG, cmdline)) {
                sigprocmask(SIG_UNBLOCK, &mask, NULL);
                waitfg(PID);
            }
        }
        else
        {
            if(addjob(jobs, PID, BG, cmdline)) {
                sigprocmask(SIG_UNBLOCK, &mask, NULL);
                printf("[%d] (%d) %s", pid2jid(PID), PID, cmdline);
            }
        }
    }
    return;
}

/* 
 * parseline - Parse the command line and build the argv array.
 * 
 * Characters enclosed in single quotes are treated as a single
 * argument.  Return true if the user has requested a BG job, false if
 * the user has requested a FG job.  
 */
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE]; /* holds local copy of command line */
    char *buf = array;          /* ptr that traverses command line */
    char *delim;                /* points to first space delimiter */
    int argc;                   /* number of args */
    int bg;                     /* background job? */

    strcpy(buf, cmdline);
    buf[strlen(buf)-1] = ' ';  /* replace trailing '\n' with space */
    while (*buf && (*buf == ' ')) /* ignore leading spaces */
	buf++;

    /* Build the argv list */
    argc = 0;
    if (*buf == '\'') {
	buf++;
	delim = strchr(buf, '\'');
    }
    else {
	delim = strchr(buf, ' ');
    }

    while (delim) {
	argv[argc++] = buf;
	*delim = '\0';
	buf = delim + 1;
	while (*buf && (*buf == ' ')) /* ignore spaces */
	       buf++;

	if (*buf == '\'') {
	    buf++;
	    delim = strchr(buf, '\'');
	}
	else {
	    delim = strchr(buf, ' ');
	}
    }
    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	return 1;

    /* should the job run in the background? */
    if ((bg = (*argv[argc-1] == '&')) != 0) {
	argv[--argc] = NULL;
    }
    return bg;
}

int stopped() {
    int i;
    for (i = 0; i < MAXJOBS; i++) {
        if (jobs[i].pid != 0 && jobs[i].state == ST) {
            return 1;
            break; 
        }
    }
    return 0; 
}

/* 
 * builtin_cmd - If the user has typed a built-in command then execute
 *    it immediately.  
 */
int builtin_cmd(char **argv) 
{
	if (strcmp(argv[0], "quit") == 0 || strcmp(argv[0], "exit") == 0) {
        if(stopped()) {
            puts("There are stopped jobs!");
            return 1;
        } else {
            exit(0);
        }
    }
    else if (strcmp(argv[0], "jobs") == 0) {
        listjobs(jobs);
        return 1;
    }
    else if (strcmp(argv[0], "bg") == 0 || strcmp(argv[0], "fg") == 0) {
        do_bgfg(argv);
        return 1;
    }
    else if (strcmp(argv[0], "ls") == 0) {
        argv[0] = "/bin/ls";
        return 0;
    }
    else if (strcmp(argv[0], "ps") == 0) {
        argv[0] = "/bin/ps";
        return 0;
    }
    else if (strcmp(argv[0], "echo") == 0) {
        argv[0] = "/bin/echo";
        return 0;
    }
    else if (strcmp(argv[0], "clear") == 0) {
        argv[0] = "/usr/bin/clear";
        return 0;
    }
    else {
        return 0;  /* not a builtin command */
    }
}

/* 
 * do_bgfg - Execute the builtin bg and fg commands
 */
void do_bgfg(char **argv) 
{
	struct job_t *job = NULL;
    pid_t pid;
    int jid;

    if(argv[1] == NULL) {
        printf("%s command requires PID or \%%jobid argument \n", argv[0]);
        return;
    }


    if(argv[1][0] == '%') {

        jid = atoi(&argv[1][1]);
        job = getjobjid(jobs, jid);

        if(job == NULL) {
            printf("\%%%d: No such job. \n", jid);
            return;
        }
    }
    else if(isdigit(argv[1][0])) {

        pid = atoi(argv[1]);
        job = getjobpid(jobs, pid);

        if(job == NULL) {
            printf("(%d): No such process. \n", pid);
            return;
        }
    }
    else {
        printf("%s: argument must be a PID or \%%jobid \n", argv[0]);
        return;
    }


    pid = job->pid;
    jid = job->jid;


    if(strcmp("bg", argv[0]) == 0) {
        if(job->state == ST) {
            if(kill(-pid, SIGCONT) < 0) {
                printf("An error has occurred in kill. \n");
            }
            job->state = BG;
            printf("[%d] (%d) %s", jid, pid, job->cmdline);
        } else {
            printf("This job is already running in the background. \n");
            return;
        }
    }
    else {
        if(kill(-pid, SIGCONT) < 0) {
            printf("An error has occurred in kill. \n");
        }
        job->state = FG;
        waitfg(pid);
    }
    return;
}

/* 
 * waitfg - Block until process pid is no longer the foreground process
 */
void waitfg(pid_t pid)
{
    struct job_t *fgjob = getjobpid(jobs, pid);
    if(getjobpid(jobs, pid) == NULL) { 
        return; 
    }
    while(fgjob->state == FG && fgjob->pid == pid) { 
        sleep(1); 
    }
    return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  
 */
void sigchld_handler(int sig) 
{
    int pid, jid, status;
    struct job_t *fgjob = NULL;

    while((pid = waitpid(-1, &status, WNOHANG|WUNTRACED)) > 0) {
        jid = pid2jid(pid);
        if(WIFSTOPPED(status)) {
            printf("[%d] (%d) Stopped %s\n", jid, pid, jobs[jid-1].cmdline);
            fgjob = getjobpid(jobs, pid);
            fgjob->state = ST;
        }
        else if(deletejob(jobs, pid)) {
            if(WIFSIGNALED(status)) {
                printf("Job [%d] (%d) terminated by signal %d. \n", jid, pid, sig);
            }
        }
    }
    return;
}

/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  
 */
void sigint_handler(int sig) 
{
    pid_t pid = 0;
    if((pid = fgpid(jobs)) > 0) {
        if(kill(-pid, sig) < 0) {
            puts("An error has occurred in kill.");
        }
    }
    return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.  
 */
void sigtstp_handler(int sig) 
{
    pid_t pid = 0;
    if((pid = fgpid(jobs)) > 0) {
        if(kill(-pid, sig) < 0) {
            puts("An error has occurred in kill.");
        }
    }
    return;
}

/*********************
 * End signal handlers
 *********************/

/***********************************************
 * Helper routines that manipulate the job list
 **********************************************/

/* clearjob - Clear the entries in a job struct */
void clearjob(struct job_t *job) {
    job->pid = 0;
    job->jid = 0;
    job->state = UNDEF;
    job->cmdline[0] = '\0';
}

/* initjobs - Initialize the job list */
void initjobs(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	clearjob(&jobs[i]);
}

/* maxjid - Returns largest allocated job ID */
int maxjid(struct job_t *jobs) 
{
    int i, max=0;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid > max)
	    max = jobs[i].jid;
    return max;
}

/* addjob - Add a job to the job list */
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
    int i;
    
    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == 0) {
	    jobs[i].pid = pid;
	    jobs[i].state = state;
	    jobs[i].jid = nextjid++;
	    if (nextjid > MAXJOBS)
		nextjid = 1;
	    strcpy(jobs[i].cmdline, cmdline);
  	    if(verbose){
	        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
            }
            return 1;
	}
    }
    printf("Tried to create too many jobs\n");
    return 0;
}

/* deletejob - Delete a job whose PID=pid from the job list */
int deletejob(struct job_t *jobs, pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == pid) {
	    clearjob(&jobs[i]);
	    nextjid = maxjid(jobs)+1;
	    return 1;
	}
    }
    return 0;
}

/* fgpid - Return PID of current foreground job, 0 if no such job */
pid_t fgpid(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].state == FG)
	    return jobs[i].pid;
    return 0;
}

/* getjobpid  - Find a job (by PID) on the job list */
struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {
    int i;

    if (pid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid)
	    return &jobs[i];
    return NULL;
}

/* getjobjid  - Find a job (by JID) on the job list */
struct job_t *getjobjid(struct job_t *jobs, int jid) 
{
    int i;

    if (jid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid == jid)
	    return &jobs[i];
    return NULL;
}

/* pid2jid - Map process ID to job ID */
int pid2jid(pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid) {
            return jobs[i].jid;
        }
    return 0;
}

/* listjobs - Print the job list */
void listjobs(struct job_t *jobs) 
{
    int i;
    
    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid != 0) {
	    printf("[%d] (%d) ", jobs[i].jid, jobs[i].pid);
	    switch (jobs[i].state) {
		case BG: 
		    printf("Running ");
		    break;
		case FG: 
		    printf("Foreground ");
		    break;
		case ST: 
		    printf("Stopped ");
		    break;
	    default:
		    printf("listjobs: Internal error: job[%d].state=%d ", 
			   i, jobs[i].state);
	    }
	    printf("%s", jobs[i].cmdline);
	}
    }
}
/******************************
 * end job list helper routines
 ******************************/


/***********************
 * Other helper routines
 ***********************/

/*
 * usage - print a help message
 */
void usage(void) 
{
    printf("Usage: shell [-hvp]\n");
    printf("   -h   print this message\n");
    printf("   -v   print additional diagnostic information\n");
    printf("   -p   do not emit a command prompt\n");
    exit(1);
}

/*
 * unix_error - unix-style error routine
 */
void unix_error(char *msg)
{
    fprintf(stdout, "%s: %s\n", msg, strerror(errno));
    exit(1);
}

/*
 * app_error - application-style error routine
 */
void app_error(char *msg)
{
    fprintf(stdout, "%s\n", msg);
    exit(1);
}

/*
 * Signal - wrapper for the sigaction function
 */
handler_t *Signal(int signum, handler_t *handler) 
{
    struct sigaction action, old_action;

    action.sa_handler = handler;  
    sigemptyset(&action.sa_mask); /* block sigs of type being handled */
    action.sa_flags = SA_RESTART; /* restart syscalls if possible */

    if (sigaction(signum, &action, &old_action) < 0)
	unix_error("Signal error");
    return (old_action.sa_handler);
}

/*
 * sigquit_handler - The driver program can gracefully terminate the
 *    child shell by sending it a SIGQUIT signal.
 */
void sigquit_handler(int sig) 
{
    printf("Terminating after receipt of SIGQUIT signal\n");
    exit(1);
}



